version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:18.03.1-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.03.1-ce
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache jq
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker version
            docker build --cache-from=app -t app .
      - run:
          name: Get Docker image size
          command: |
            mkdir /tmp/artifacts;
            docker images --format "{{.Size}}" app > /tmp/artifacts/size;
      - store_artifacts:
          path: /tmp/artifacts
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run:
          name: Run malware-samples tests
          command: |
            set -x
            docker run --rm -it app -V m
      - run:
          name: Run theZoo tests
          command: |
            set -x
            docker run --rm -it app -V z
      # - run:
      #     name: Run contagio tests
      #     command: |
      #       set -x
      #       docker run --rm -it app -V c
      # - run:
      #     name: Review results
      #     command: |
      #       docker cp bro:/pcap/notice.log  pcap/notice.log
      #       ls -lah pcap
      #       cat pcap/notice.log | awk '{ print $11 }' | tail -n4
      # - deploy:
      #     name: Push application Docker image
      #     command: |
      #       if [ "${CIRCLE_BRANCH}" == "master" ]; then
      #         login="$(aws ecr get-login)"
      #         ${login}
      #         docker tag app "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
      #         docker push "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
      #       fi
